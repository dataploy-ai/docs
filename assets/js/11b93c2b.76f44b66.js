"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1492],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1395:function(e,t,n){n.d(t,{Z:function(){return g}});var r=n(7294),a=n(6010),i=n(9960),o=n(3651),p=n(3919),s=n(5999),l="cardContainer_fWXF",c="cardTitle_rnsV",d="cardDescription_PWke";function u(e){var t=e.href,n=e.children;return r.createElement(i.Z,{href:t,className:(0,a.Z)("card padding--lg",l)},n)}function m(e){var t=e.href,n=e.icon,i=e.title,o=e.description;return r.createElement(u,{href:t},r.createElement("h2",{className:(0,a.Z)("text--truncate",c),title:i},n," ",i),o&&r.createElement("p",{className:(0,a.Z)("text--truncate",d),title:o},o))}function f(e){var t=e.item,n=(0,o.Wl)(t);return n?r.createElement(m,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function y(e){var t,n=e.item,a=(0,p.Z)(n.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",i=(0,o.xz)(null!=(t=n.docId)?t:void 0);return r.createElement(m,{href:n.href,icon:a,title:n.label,description:null==i?void 0:i.description})}function h(e){var t=e.item;switch(t.type){case"link":return r.createElement(y,{item:t});case"category":return r.createElement(f,{item:t});default:throw new Error("unknown item type "+JSON.stringify(t))}}function g(e){var t=e.docId;try{var n=(0,o.xz)(null!=t?t:void 0),a=t.endsWith("/readme")?t.substring(0,t.length-"/readme".length):t;return r.createElement("p",null,r.createElement(h,{item:{type:"link",label:n.title,docId:t,href:"/docs/"+a}}))}catch(i){return r.createElement("div",{className:"card padding--lg cardContainer margin-bottom--sm"},r.createElement("b",null,"Error:")," ",i.message)}}},6947:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=n(1395),p=["components"],s={description:"The Python Expression(PyExp) Language is one of the most popular ways for you to define the builder's business logic."},l="Python Expression Language (PyExp)",c={unversionedId:"reference/pyexp/readme",id:"reference/pyexp/readme",title:"Python Expression Language (PyExp)",description:"The Python Expression(PyExp) Language is one of the most popular ways for you to define the builder's business logic.",source:"@site/docs/reference/pyexp/readme.mdx",sourceDirName:"reference/pyexp",slug:"/reference/pyexp/",permalink:"/docs/reference/pyexp/",draft:!1,editUrl:"https://github.com/natun-ai/docs/tree/master/docs/reference/pyexp/readme.mdx",tags:[],version:"current",frontMatter:{description:"The Python Expression(PyExp) Language is one of the most popular ways for you to define the builder's business logic."},sidebar:"reference",previous:{title:"Historical Data and Backfill",permalink:"/docs/reference/how-does-natun-work/historical-data-and-backfill"},next:{title:"Differences with Python",permalink:"/docs/reference/pyexp/differences-with-python"}},d={},u=[{value:"Syntax",id:"syntax",level:2},{value:"Building features with PyExp",id:"building-features-with-pyexp",level:2},{value:"PyExp in production",id:"pyexp-in-production",level:2}],m={toc:u};function f(e){var t=e.components,s=(0,a.Z)(e,p);return(0,i.kt)("wrapper",(0,r.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"python-expression-language-pyexp"},"Python Expression Language (PyExp)"),(0,i.kt)("p",null,"Some feature builders allow us to express our feature's \"business logic\" via Natun's Python Expression (PyExp) Language."),(0,i.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"success")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Using PyExp, we can benefit from a deterministic, secure, and production-grade sandboxing of the code for your business logic."))),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"PyExp's syntax is inspired by Python3. This is valid syntax in PyExp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def fizz_buzz(n):\n  """Print Fizz Buzz numbers from 1 to n."""\n  for i in range(1, n + 1):\n    s = ""\n    if i % 3 == 0:\n      s += "Fizz"\n    if i % 5 == 0:\n      s += "Buzz"\n    print(s if s else i)\n\nfizz_buzz(20)\n')),(0,i.kt)("p",null,"PyExps semantics can differ from Python, but behavioral differences are rare, except for cases where PyExp raises an error. The following Python types are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#none",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"None"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#booleans",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"bool"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#dictionaries",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"dict"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#functions",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"def"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#integers",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"int"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#lists",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"list"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#strings",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"string")))),(0,i.kt)("h2",{id:"building-features-with-pyexp"},"Building features with PyExp"),(0,i.kt)("p",null,"Implementing features with PyExp is easy. The only thing you need to implement is the function ",(0,i.kt)("inlineCode",{parentName:"p"},"handler"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def handler():\n  """Implement city feature"""\n  return "Tel-Aviv"\n')),(0,i.kt)("p",null,"For more information read:"),(0,i.kt)(o.Z,{docId:"reference/pyexp/handler-function",mdxType:"DocCard"}),(0,i.kt)("p",null,"In addition, you can use the ",(0,i.kt)("a",{parentName:"p",href:"pyexp/natun-built-ins/"},"natun built-ins"),' in order to depend on other features (and leverage that for "joins" like features), or do complex transformations.'),(0,i.kt)("p",null,"for more information read:"),(0,i.kt)(o.Z,{docId:"reference/pyexp/natun-built-ins/readme",mdxType:"DocCard"}),(0,i.kt)("h2",{id:"pyexp-in-production"},"PyExp in production"),(0,i.kt)("p",null,"After a feature is being deployed to the cluster, Natun will compile your PyExp code into bytecode. This process allows us to run your PyExp in a dedicated runtime sandbox and provide us with a production-ready code that is safe, reproducible, and deterministic."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"PEL compilation process",src:n(9804).Z,width:"496",height:"216"})),(0,i.kt)("p",null,"It's important to emphasize that the PyExp code is restricted of I/O operations in order to protect the code for production running. Only specific operations(which are implemented by the runtime) are allowed to do I/O."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"PyExp is based on a python dialect called Starlark. For a complete list of functions and types, check the ",(0,i.kt)("a",{parentName:"p",href:"pyexp/pyexp-language-definition/"},"Pyexp language definition"),"."))))}f.isMDXComponent=!0},9804:function(e,t,n){t.Z=n.p+"assets/images/docs-PyExp.drawio-5ed2a13659eb83d2cf1b674d5d6c5de3.png"}}]);