"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4504],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},g=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(l,".").concat(d)]||p[d]||c[d]||i;return n?a.createElement(m,o(o({ref:t},g),{},{components:n})):a.createElement(m,o({ref:t},g))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3867:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={title:"Aggregations"},o=void 0,s={unversionedId:"guides/labsdk/aggregations",id:"guides/labsdk/aggregations",title:"Aggregations",description:"Aggregations are probably the most complex challenge while building a production-grade feature,",source:"@site/docs/guides/labsdk/2-aggregations.md",sourceDirName:"guides/labsdk",slug:"/guides/labsdk/aggregations",permalink:"/docs/guides/labsdk/aggregations",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/guides/labsdk/2-aggregations.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Aggregations"},sidebar:"guides",previous:{title:"The basics",permalink:"/docs/guides/labsdk/basics"},next:{title:"Counters",permalink:"/docs/guides/labsdk/simple-counter"}},l={},u=[],g={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aggregations are probably the most complex challenge while building a production-grade feature,\nthey require a ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/how-does-natun-work/features/aggregations"},"special mechanism")," to handle the data in\nproduction, but are relatively easy to implement in development."),(0,r.kt)("p",null,"Fortunately, it's relatively easy to build aggregations in Natun."),(0,r.kt)("h1",{id:"rolling-window-aggregations"},"Rolling window aggregations"),(0,r.kt)("p",null,"Aggregations are usually being calculated on a rolling window, I.e. The amount of clicks over the last hour."),(0,r.kt)("p",null,"We can achieve that by using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/labsdk/decorators#aggregate"},(0,r.kt)("inlineCode",{parentName:"a"},"@natun.aggr"))," decorator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"@natun.register(int, freshness='1m', staleness='10h')\n@natun.aggr([natun.AggrFn.Count])\ndef clicks(**req: NatunRequest):\n    \"\"\"clicks over 10 hours\"\"\"\n    return 1, req[\"timestamp\"], req['payload']['user_id']\n")),(0,r.kt)("p",null,"Pretty simple right? let's go through what we did here line by line:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We registered the feature with the ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/labsdk/decorators"},(0,r.kt)("inlineCode",{parentName:"a"},"@natun.register"))," decorator:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"We set the feature primitive type to ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," (the type of the feature's output)."),(0,r.kt)("li",{parentName:"ol"},"We set the feature's freshness to ",(0,r.kt)("inlineCode",{parentName:"li"},"1m")," - ",(0,r.kt)("strong",{parentName:"li"},"that we're counting in a ",(0,r.kt)("inlineCode",{parentName:"strong"},"1 minute")," resolution"),"."),(0,r.kt)("li",{parentName:"ol"},"We set the feature's staleness to ",(0,r.kt)("inlineCode",{parentName:"li"},"10h")," - that means that the click will be stale after 10 hours, ",(0,r.kt)("strong",{parentName:"li"},"and our\nwindow size is also 10 hours"),"."))),(0,r.kt)("li",{parentName:"ol"},"We set the feature's aggregation to ",(0,r.kt)("inlineCode",{parentName:"li"},"Count")," - We're running this aggregation function against the function's result."),(0,r.kt)("li",{parentName:"ol"},"We set the feature's description. This is a good place to put a description of the feature's logic that can help\nour colleagues to understand it."),(0,r.kt)("li",{parentName:"ol"},"We return:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"The calculated feature value, which is the number of clicks in this request. Since this function is called every\ntime\na user clicked on a button, it will be 1 every time."),(0,r.kt)("li",{parentName:"ol"},"The timestamp of the request, which is the time when the request was received."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"user_id")," of the user who clicked on the button that we extracted from the payload.")))),(0,r.kt)("h1",{id:"aggregation-functions"},"Aggregation functions"),(0,r.kt)("p",null,"Now that we know how to build aggregations, let's go ahead and build a feature that have multiple aggregation functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'@natun.register(int, freshness=\'1m\', staleness=\'10h\')\n@natun.builder("streaming")\n@natun.aggr([natun.AggrFn.Sum, natun.AggrFn.Avg, natun.AggrFn.Max, natun.AggrFn.Min])\ndef deals_10h(**req: NatunRequest):\n    """sum/avg/min/max of deal amount over 10 hours"""\n    return req[\'payload\']["amount"], req["timestamp"], req[\'payload\']["account_id"]\n')),(0,r.kt)("p",null,"In this example, we're building a feature that is calculating the sum, average, maximum and minimum of the deal amount."),(0,r.kt)("p",null,"This is actually generating for us multiple features, one for each aggregation function.\nWe can access them by specifying the aggregation function in the Feature's FQN:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'feature_get("deals_10h.default[sum]")\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Notice that we used here a ",(0,r.kt)("inlineCode",{parentName:"p"},".default")," suffix to the feature's FQN.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," is the name of the namespace the feature is configured to be in."),(0,r.kt)("p",{parentName:"admonition"},"When not specifying a namespace(using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/labsdk/decorators"},(0,r.kt)("inlineCode",{parentName:"a"},"@natun.namespace")," decorator"),"), the\nfeature is configured to be in the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," namespace.")))}c.isMDXComponent=!0}}]);