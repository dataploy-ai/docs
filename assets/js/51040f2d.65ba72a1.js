"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9132],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(r),f=o,h=p["".concat(u,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(h,s(s({ref:t},l),{},{components:r})):n.createElement(h,s({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6420:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},s="How does Natun work?",i={unversionedId:"reference/how-does-natun-work/readme",id:"reference/how-does-natun-work/readme",title:"How does Natun work?",description:'Natun is extending Kubernetes to serve features in a production-grade manner. It\'s implementing the "Kubernetes Way," which advocates for writing the desired state and allows you to focus on writing the business logic.',source:"@site/docs/reference/how-does-natun-work/readme.mdx",sourceDirName:"reference/how-does-natun-work",slug:"/reference/how-does-natun-work/",permalink:"/docs/reference/how-does-natun-work/",draft:!1,editUrl:"https://github.com/dataploy-ai/docs/tree/master/docs/reference/how-does-natun-work/readme.mdx",tags:[],version:"current",frontMatter:{},sidebar:"reference",next:{title:"Feature Builders",permalink:"/docs/reference/how-does-natun-work/feature-builders/"}},u={},c=[],l={toc:c};function d(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-does-natun-work"},"How does Natun work?"),(0,o.kt)("p",null,'Natun is extending Kubernetes to serve features in a production-grade manner. It\'s implementing the "Kubernetes Way," which advocates for writing the desired state and allows you to focus on writing the business logic.\nNatun takes care of the engineering concerns of implementing the "desired state" by managing and controlling Kubernetes-native resources such as deployments to connect your production data-sources and to run your business logic at scale.'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"High level architecture",src:r(6671).Z,width:"672",height:"507"})),(0,o.kt)("p",null,"To achieve that, Natun must understand the logic of the Feature and create the engineering setup required for the production version and introduce a new way of describing features - Feature Definitions."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Feature Definitions are usually stored in Git, like any other Kubernetes' manifest you have in your organization.\nThis approach carries benefits such as review and comparison for every change, an ability to see previous versions, etc.")),(0,o.kt)("p",null,'Feature Definitions only become Features after Natun Operator spins off the necessary compute, connections, and storage resources. We recommend using your CI/CD to deploy the Feature Definitions to the Kubernetes cluster, as you do with any other Kubernetes resource. Applying your DevOps policies like code-review or "staging first" can be very useful and can finally make DS resources an integral part of your RND.'),(0,o.kt)("p",null,"After the Feature Definitions have been deployed to your cluster, Natun Operator automatically discovers them and uses the relevant ",(0,o.kt)("a",{parentName:"p",href:"./how-does-natun-work/feature-builders"},"Builder")," to configure the resources needed for the Feature. Such resources include data-connectors to external sources, storage resources, and compute resources."),(0,o.kt)("p",null,"Finally, after the Features have been deployed, you can server these features to the model or utilize the ",(0,o.kt)("a",{parentName:"p",href:"./how-does-natun-work/feature-sets"},"FeatureSet")," to prepare a ready-to-use data-set."))}d.isMDXComponent=!0},6671:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/high-level-diagram-51bfcfb177a84c730de745c14faeeb85.png"}}]);