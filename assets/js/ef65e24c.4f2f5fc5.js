"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6073],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,m=p["".concat(i,".").concat(d)]||p[d]||f[d]||o;return r?n.createElement(m,s(s({ref:t},l),{},{components:r})):n.createElement(m,s({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=p;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,s[1]=u;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6940:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={},s="Features",u={unversionedId:"reference/how-does-natun-work/features/README",id:"reference/how-does-natun-work/features/README",title:"Features",description:"In data science, a Feature is an input to your models.",source:"@site/docs/reference/how-does-natun-work/features/README.md",sourceDirName:"reference/how-does-natun-work/features",slug:"/reference/how-does-natun-work/features/",permalink:"/docs/reference/how-does-natun-work/features/",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/how-does-natun-work/features/README.md",tags:[],version:"current",frontMatter:{},sidebar:"reference",previous:{title:"Feature Sets",permalink:"/docs/reference/how-does-natun-work/feature-sets"},next:{title:"Aggregations",permalink:"/docs/reference/how-does-natun-work/features/aggregations"}},i={},c=[],l={toc:c};function f(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"features"},"Features"),(0,a.kt)("p",null,"In data science, a ",(0,a.kt)("strong",{parentName:"p"},"Feature")," is an input to your models."),(0,a.kt)("p",null,"Each feature in Natun is built using a ",(0,a.kt)("a",{parentName:"p",href:"feature-builders/"},(0,a.kt)("strong",{parentName:"a"},"Feature Builder")),", which defines the feature inputs,\nhow the feature is calculated and stored, what freshness and latency guarantees (link) it should keep, and anything that\na production system might need to know about your feature."),(0,a.kt)("p",null,"You can define features using ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/how-does-natun-work/features/feature-definitions"},(0,a.kt)("strong",{parentName:"a"},"Feature Definitions")),", which are YAML files that describes the\nbusiness logic of the feature and some metadata about it."),(0,a.kt)("p",null,"Feature Definitions become ",(0,a.kt)("strong",{parentName:"p"},"live")," once they are ",(0,a.kt)("a",{parentName:"p",href:"deployment/"},(0,a.kt)("strong",{parentName:"a"},"Deployed"))," into a Kubernetes cluster.\nThis can be a production cluster or one dedicated for staging or experimentation.\nOnce the feature is deployed, Natun will spin up the necessary workers, stores and connections to calculate feature values\nand make sure your feature values are available to your models."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"./features/feature-values"},(0,a.kt)("strong",{parentName:"a"},"Feature Values"))," are the results of the computation and inputs of the feature.\nFeature Values have a Primitive Type (int, float, string, or a list of ints, floats, or strings), and in some cases are\nstored to the Natun Feature Store for later access."),(0,a.kt)("p",null,"Models usually require a group of features, which are called ",(0,a.kt)("a",{parentName:"p",href:"./feature-sets"},(0,a.kt)("strong",{parentName:"a"},"Feature Sets"))," in Natun.\nA model can consume a feature set in one line of code."),(0,a.kt)("p",null,"Custom features logic be written in ",(0,a.kt)("a",{parentName:"p",href:"../pyexp/"},(0,a.kt)("strong",{parentName:"a"},"PyExp")),", which is a Python dialect that\ncan be run at scale."))}f.isMDXComponent=!0}}]);